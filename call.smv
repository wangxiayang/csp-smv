MODULE main()
{
	ctos : array 0 .. 5 of ctos_channel;
	stoc : array 0 .. 5 of stoc_channel;
	client : client(stoc, ctos);
	server : server(ctos, stoc);

SPEC
	AG (client.threads[0].state = calling -> EF client.threads[0].state = done);
}

MODULE client(stoc, ctos)
{
	threads : array 0 .. 5;
	for(i = 0; i < 6; i = i + 1)
		threads[i] : process client_thread(stoc[i], ctos[i]);
}

MODULE client_thread(stoc, ctos)
{
	state : {before, calling, waiting, done};
	init(state) := before;
	next(state) := switch(state) {
		before : calling;
		calling : waiting;
		waiting : stoc.ready ? done : waiting;
		done : before;
	};
	init(ctos.arg) := 0;
	next(ctos.arg) := case {
		state = calling : ctos.arg + 1;
	};
	init(ctos.ready) := 0;
	next(ctos.ready) := case {
		state = calling : 1;
	};
	next(stoc.ready) := case {
		state = waiting & stoc.ready : 0;
	};

FAIRNESS
	running;
}

MODULE server(ctos, stoc)
{
	threads : array 0 .. 5;
	for(i = 0; i < 6; i = i + 1)
		threads[i] : process server_thread(ctos[i], stoc[i]);
}

MODULE server_thread(ctos, stoc)
{
	state : {free, returning};

	init(state) := free;
	next(state) := switch(state) {
		free : ctos.ready ? returning : free;	-- one cycle job
		returning : free;
	};
	init(stoc.ret) := 7;
	next(stoc.ret) := case {
		state = free & ctos.ready : ctos.arg + 7;
	};
	init(stoc.ready) := 0;
	next(stoc.ready) := case {
		state = free & ctos.ready : 1;
	};
	next(ctos.ready) := case {
		state = free & ctos.ready : 0;
	};

FAIRNESS
	running;
}

typedef ctos_channel struct {
	arg : 0 .. 3;
	ready : boolean;
}

typedef stoc_channel struct {
	ready : boolean;
	ret : 7 .. 10;
}