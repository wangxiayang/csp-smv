MODULE main()
{
	mutex : boolean;
	cv : cond_t;

	init(mutex) := 0;
	init(cv.wake_ok) := 0;
	init(cv.wait_num) := 0;

	waker : process waker(cv.wake_ok);
	sleepers : array 0 .. 2 of process sleeper(cv, mutex);

SPEC
	!EF (sleepers[0].state = 3 & sleepers[1].state = 3)
	&& !EF (sleepers[0].state = 3 & sleepers[2].state = 3)
	&& !EF (sleepers[1].state = 3 & sleepers[2].state = 3)
	&& AG(sleepers[0].state = 1 -> EF(sleepers[0].state = 0));
}

MODULE waker(wake_ok)
{
	next(wake_ok) := 1;
FAIRNESS
	running;
}

MODULE sleeper(cv, mutex)
{
	state : 0 .. 4;
	cond_state : {free, prepare, wait};

	init(state) := 0;
	init(cond_state) := free;

	next(state) := switch(state) {
		0 : {0, 1};
		1 : !mutex ? 2 : 1;	-- acquiring mutex
		2 : cond_state = free ? 3 : 2;
		3 : {3, 4};
		4 : 0;
	};
	next(mutex) := case {
		cond_state = prepare : 0;	-- assume that it has already hold the mutex, force to release
		cond_state = wait & cv.wake_ok & !mutex : 1;
		state = 1 & !mutex : 1;
		state = 4 : 0;
		1 : mutex;
	};
	next(cond_state) := case {
		state = 1 & !mutex : prepare;	-- leave one cycle to update cond and release mutex
		cond_state = prepare : wait;
		cond_state = wait & cv.wake_ok & !mutex : free;
		1 : cond_state;
	};
	next(cv.wake_ok) := case {
		cond_state = prepare & cv.wait_num = 0 : 0;	-- reset cond if it's head of waiting list
		cond_state = wait & cv.wake_ok & !mutex : 0;	-- reset cond if it has consumed the wake-up signal
		1 : cv.wake_ok;
	};
	next(cv.wait_num) := case {
		cond_state = prepare : cv.wait_num + 1;
		cond_state = wait & cv.wake_ok & !mutex : cv.wait_num - 1;
		1 : cv.wait_num;
	};


FAIRNESS
	running;
}

typedef cond_t struct {
	wake_ok : boolean;
	wait_num : 0 .. 5;
}