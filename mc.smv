MODULE main()
{
	channel_in : array 0 .. 3 of lc_thread_in();
	channel_out : array 0 .. 3 of lc_thread_out();

	acquire_module : lock_client_acquire(channel_in, channel_out);
	threads : client_threads(channel_in, channel_out);
}

MODULE lock_client_acquire(channel_in, channel_out)
{
	init(channel_in[0].acquire_ok) := 0;
	next(channel_in[0].acquire_ok) := channel_out[0].acquire ? 1 : 0;
}

MODULE client_threads(channel_in, channel_out)
{
	lt : array 0 .. 3;
	for(i = 0; i < 4; i = i + 1)
		lt[i] : process lock_client_thread(channel_in[i], channel_out[i]);

SPEC
	AG(lt[0].status = not_hold -> EF channel_out[0].release);
}

MODULE lock_client_thread(lct_in, lct_out)
{
	status : {hold, not_hold, acquiring, releasing};
	
	init(status) := not_hold;
	init(lct_out.acquire) := 0;
	init(lct_out.release) := 0;
	init(lct_out.lid) := 0;

	next(status) := switch(status) {
		not_hold : {not_hold, acquiring};
		acquiring : lct_in.acquire_ok ? hold : acquiring;
		hold : {releasing, hold};
		releasing : lct_in.release_ok ? not_hold : releasing;
		1 : not_hold;
	};
	next(lct_out.acquire) := (status = acquiring) ? 1 : 0;
	next(lct_out.release) := status = releasing ? 1 : 0;
	next(lct_out.lid) := (status = acquiring & !lct_out.acquire) ? {0 .. 1} : 0;
	
FAIRNESS
	running;
}

MODULE lc_thread_in() {
VAR
	acquire_ok : boolean;
	release_ok : boolean;
}

MODULE lc_thread_out() {
VAR
	acquire : boolean;
	release : boolean;
	lid : 0 .. 1;
}